{"version":3,"sources":["components/SudokuBoard.js","components/App.js","index.js"],"names":["SudokuBoard","props","componentDidMount","unsolved","findUnsolvedSpaces","attempts","forEach","coords","row","column","setState","state","board","y","space","x","undefined","push","getNumberAtPosition","updatedBoard","value","newBoard","identifySubSquare","rowOffset","colOffset","numbersInRow","setNumbers","Set","delete","numbersInColumn","numbers","map","numbersInSubSquare","topLeftCoords","rowIndex","filter","element","flat","numbersAffectingPosition","allNumbers","concat","possibleNumbersForPosition","possibleNumbers","number","nextStepIfHaveNumberChoices","choice","newAttempts","i","position","nextStepIfNoNumbersLeft","Error","solveNextStep","length","console","log","stopSolving","solved","startSolving","isSolving","solver","setInterval","clearInterval","showSolvedMessage","index","this","cell","className","getCellClass","key","renderNumbers","type","disabled","onClick","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6c39234.chunk.js","sourcesContent":["import React from 'react';\n\nimport './SudokuBoard.css';\n\nclass SudokuBoard extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state ={\n            i: 0,\n            board: [\n                [8, undefined, undefined, 7, undefined, 3, undefined, undefined, undefined],\n                [undefined, undefined, 3, 6, undefined, undefined, undefined, undefined, undefined],\n                [undefined, 7, undefined, undefined, 9, undefined, 2, undefined, undefined],\n                [undefined, 5, undefined, undefined, undefined, 7, undefined, undefined, undefined],\n                [undefined, undefined, undefined, undefined, 4, 5, 7, undefined, undefined],\n                [undefined, undefined, undefined, 1, undefined, undefined, undefined, 3, undefined],\n                [5, undefined, 1, undefined, undefined, undefined, undefined, 6, 8],\n                [undefined, undefined, 8, 5, undefined, undefined, undefined, 1, undefined],\n                [undefined, 9, undefined, undefined, undefined, undefined, 4, 5, undefined]\n            ],\n            attempts: {},\n            unsolved: [],\n            isSolving: false,\n            solver: undefined,\n            solved: false\n        }\n    }\n\n    componentDidMount = () =>{\n        let unsolved = this.findUnsolvedSpaces();\n\n        let attempts = {};\n        unsolved.forEach(coords => {\n            attempts[`${coords.row}-${coords.column}`] = [];\n        })\n\n        this.setState({\n            unsolved : unsolved,\n            attempts : attempts\n        })\n\n    }\n\n    findUnsolvedSpaces = () => {\n        let unsolved = [];\n        this.state.board.forEach((row, y) => {\n            row.forEach((space, x) => {\n                if (space === undefined) {\n                    unsolved.push({ row: y, column: x });\n                }\n            });\n        });\n        return unsolved;\n    }\n\n    getNumberAtPosition = (coords) => {\n        // x = column, y = row\n        return this.state.board[coords.row][coords.column];\n    }\n\n    updatedBoard = (coords, value, board = this.state.board) => {\n        // x = column, y = row\n        let newBoard = board;\n        newBoard[coords.row][coords.column] = value;\n        return newBoard;\n    }\n\n    identifySubSquare = (coords) => {\n        //returns coordinate of top left cell of subsquare\n        let rowOffset = coords.row % 3;\n        let colOffset = coords.column % 3;\n        return {\n            row: coords.row - rowOffset,\n            column: coords.column - colOffset\n        }\n    }\n\n    numbersInRow = (coords) => {\n        let row = coords.row;\n        let setNumbers = new Set(this.state.board[row]);\n        setNumbers.delete(undefined);\n        return [...setNumbers];\n    }\n\n    numbersInColumn = (coords) => {\n        let column = coords.column;\n        let numbers = this.state.board.map(row => {\n            return row[column];\n        });\n        let setNumbers = new Set(numbers);\n        setNumbers.delete(undefined);\n        return [...setNumbers];\n    }\n\n    numbersInSubSquare = (coords) => {\n        let topLeftCoords = this.identifySubSquare(coords);\n        let numbersInSubSquare = this.state.board.map((row, rowIndex) => {\n            if (rowIndex >= topLeftCoords.row && rowIndex <= topLeftCoords.row + 2) {\n                let numbers = [];\n                for (let column = topLeftCoords.column; column <= topLeftCoords.column + 2; column++) {\n                    numbers.push(row[column]);\n                }\n                return numbers;\n            }\n            return undefined;\n        })\n        numbersInSubSquare = numbersInSubSquare.filter(element => { return element !== undefined });\n        numbersInSubSquare = numbersInSubSquare.flat();\n\n        let setNumbers = new Set(numbersInSubSquare);\n        setNumbers.delete(undefined);\n        return [...setNumbers];\n    }\n\n    numbersAffectingPosition = (coords) => {\n        let numbersInRow = this.numbersInRow(coords);\n\n        let numbersInColumn = this.numbersInColumn(coords);\n\n        let numbersInSubSquare = this.numbersInSubSquare(coords);\n\n        let allNumbers = numbersInRow.concat(numbersInColumn, numbersInSubSquare);\n\n        return new Set(allNumbers);\n    }\n\n    possibleNumbersForPosition = (coords) => {\n        let possibleNumbers = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n        let notPossible = this.numbersAffectingPosition(coords);\n        notPossible.forEach(number => {\n            possibleNumbers.delete(number);\n        });\n        return possibleNumbers;\n    }\n\n    nextStepIfHaveNumberChoices = (possibleNumbers) => {\n        let choice = possibleNumbers[0];\n\n        let newAttempts = this.state.attempts;\n        newAttempts[`${this.state.unsolved[this.state.i].row}-${this.state.unsolved[this.state.i].column}`].push(choice);\n        let newBoard = this.state.board;\n        let position = this.state.unsolved[this.state.i]\n        newBoard[position.row][position.column] = choice;\n        this.setState({\n            attempts: newAttempts,\n            i: this.state.i + 1,\n            board: newBoard\n        });\n    }\n\n    nextStepIfNoNumbersLeft = () => {\n        let newBoard = this.updatedBoard(this.state.unsolved[this.state.i], undefined)\n\n        let newAttempts = this.state.attempts;\n        newAttempts[`${this.state.unsolved[this.state.i].row}-${this.state.unsolved[this.state.i].column}`] = [];\n        // i--;\n        newBoard = this.updatedBoard(this.state.unsolved[this.state.i -1 ], undefined, newBoard);\n        // i--;\n        if ( (this.state.i - 2) < 0) {\n            throw new Error(\"Unable to solve Sudoku - make sure the board is valid\")\n        }\n\n        this.setState({\n            board: newBoard,\n            attempts: newAttempts,\n            i: this.state.i - 1\n        });\n    }\n\n    solveNextStep = () => {\n        if(this.state.i === this.state.unsolved.length){\n            console.log(\"Sudoku solved!\");\n            this.stopSolving();\n            this.setState({solved: true});\n            return;\n        }\n\n        let possibleNumbers = this.possibleNumbersForPosition(this.state.unsolved[this.state.i]); //Set\n        let previouslyTried = this.state.attempts[`${this.state.unsolved[this.state.i].row}-${this.state.unsolved[this.state.i].column}`]; //Array\n\n        previouslyTried.forEach(number => {\n            possibleNumbers.delete(number);\n        })\n\n        possibleNumbers = [...possibleNumbers]; //convert Set to array\n\n        if (possibleNumbers.length > 0) {\n            this.nextStepIfHaveNumberChoices(possibleNumbers);\n        } else {\n            this.nextStepIfNoNumbersLeft();\n        }\n\n    }\n\n    startSolving = () => {\n        if(!this.state.isSolving){\n            this.setState({\n                isSolving: true,\n                solver: setInterval(this.solveNextStep, 1)\n            })\n        }\n    }\n\n    stopSolving = () => {\n        clearInterval(this.state.solver);\n        this.setState({\n            isSolving: false,\n            solver: undefined\n        })\n    }\n\n    showSolvedMessage = () => {\n        return this.state.solved ? \"visible\" : \"hidden\";\n    }\n\n    getCellClass(index) {\n        if(index >= 27 && index < 36){\n            return \"cell-border-top\";\n        } else if (index >= 54 && index < 63){\n            return \"cell-border-top\";\n        } else {\n            return \"\";\n        }\n    }\n\n    renderNumbers(){\n        let cells = this.state.board.flat();\n        return cells.map( (cell, index) => {\n            return (\n                <div className={`cell ${this.getCellClass(index)}`} key={`cell-${index}`}>\n                    {cell}\n                </div>\n            );\n        })\n    }\n\n    render(){\n        return (\n            <div className=\"sudoku-board-container\">\n                <div className={\"sudoku-board \" + (this.state.solved ? \"completed\" : \"\")}>\n                    {this.renderNumbers()}\n                </div>\n                <p>Use the buttons below to start/stop the brute force Sudoku solving process</p>\n                <div>\n                    <input type=\"button\" className=\"ui button\" disabled={this.state.isSolving} onClick={this.startSolving} value=\"Solve\" />\n                    <input type=\"button\" className=\"ui button\" disabled={!this.state.isSolving} onClick={this.stopSolving} value=\"Pause\" />\n                </div>\n                <p className={this.showSolvedMessage()}>Solved!</p>\n            </div>\n        );\n    }\n}\n\nexport default SudokuBoard;","import React from 'react';\nimport SudokuBoard from './SudokuBoard';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>Sudoku brute-force solver</h1>\n      <SudokuBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}